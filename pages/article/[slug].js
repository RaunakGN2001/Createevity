import React from 'react'
import qs from 'qs'
import { fetchArticleBySlug } from '../../http'
import { Box, Image, Text } from '@chakra-ui/react'
import Head from 'next/head'
import serializeMarkdown from '../../utils/serializeMarkdown'
import { MDXRemote } from 'next-mdx-remote'
import { serialize } from 'next-mdx-remote/serialize'

const slug = ({article, notFound=false}) => {

    console.log(article.attributes);
  return (
    <>
        <Head>
            <title>{article.attributes.Title}</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='icon' href='/favicon.ico' />
        </Head>
        {notFound === false ? 
        (
        <Box padding='2rem'>
        <Text fontSize='45px'>
            {article.attributes.Title}
        </Text>
        <Box paddingLeft='15px' borderLeft='4px solid gray' background='linear-gradient(90deg, rgba(227,227,227,1) 10%, rgba(255,255,255,1) 100%)' display='flex' paddingTop='0.5rem' paddingBottom='0.5rem' marginTop='1rem' alignItems='center' gap='10px'>
            <Image height='45px' width='48px' borderRadius='50%' src={`https://createevity-backend.onrender.com${article.attributes.author.data.attributes.avatar.data.attributes.formats.thumbnail.url}`} />
            <Text fontSize='18px'>{article.attributes.author.data.attributes.firstname} {article.attributes.author.data.attributes.lastname}</Text>
            <Text color='gray.500' fontSize='18px'>on {article.attributes.createdAt.slice(0,10)} at {article.attributes.createdAt.slice(11,16)}</Text>
        </Box>
        <Box marginTop='4rem'>
            <Image className='articleImage' width='100%' src={`https://createevity-backend.onrender.com${article.attributes.Image.data.attributes.formats.large.url}`} marginBottom='25px' />
            
            <div className='Markdown-wrapper'>
                <MDXRemote {...article.attributes.body} />
            </div>
        </Box>
        </Box>
        ) 
        : <Box><Text>Not found</Text></Box>}
    </>
  )
}


export const getServerSideProps = async ( {query} ) => {

    const queryString = qs.stringify({
        populate: ['Image', 'author.avatar'],
        filters: {
            Slug: {
                $eq: query.slug,
            },
        },
    });


    const articles = await fetchArticleBySlug(queryString); 

    // console.table(articles.data.data)

    const body = await serialize(articles.data.data[0].body)

    console.log(body);

    
    if(articles.data.data.length === 0) {
        return {
            notFound: true,
        };
    }

    return {
        props: {
            // article: articles.data[0],
            // article: articles.data.data[0],       
            article: await serializeMarkdown(articles.data.data[0]),
        },
    }

};


export default slug